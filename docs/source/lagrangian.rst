.. _label_lagrangian:

Lagrangian Analysis
===================

Overview
^^^^^^^^
Lagrangian analysis is an in situ data reduction operator used for time-dependent vector field data generated by a simulation code. With the objective of storing fluid dynamics data in its Lagrangian representation, the Lagrangian analysis is implemented as a VTK-m filter. The filter operates by placing and calculating particle trajectories in the flow volume. These particle trajectories encode the underlying behavior of the flow field. Calculating and extracting a Lagrangian representation of a flow field offers significantly improved accuracy-storage propositions for time-depenent flow visualization compared to the traditional (Eulerian) method. Thus, the Lagrangian analysis filter enables data reduction of large vector fields while maintaining high data integrity. 

Lagrangian analysis operates as a two-phase approach. The first phase is performed in situ and involves calculating and extracting flow field information. The second phase is performed post hoc and involves interpolating the extracted information to perform time-dependent flow visualization.

To calculate a Lagrangian representation in situ, we uniformly seed particles in the volume and advect the particles for nonoverlapping pre-determined intervals of time. The calculated particle trajectories are referred to as basis flows. The extracted basis flows are accurate given they use the complete spatial and temporal resolution of the simulation vector field during advection. For each basis flow, the start location and end location of the particle trajectory is known. 

The stored basis flow information can be interpolated post hoc to perform exploratory time-dependent flow visualization. Complete pathlines can be calculated by concatenating results from batches of basis flows. 


Getting Started
^^^^^^^^^^^^^^^
Lagrangian analysis functionality is accessible via Ascent. In situ extraction of time-dependent vector field data is performed using a VTK-m filter and particle advection VTK-m worklet. The Ascent library is light-weight infrastructure that is directly integrated with the simulation code. Depending on the particular use case, Lagrangian analysis can also be directly performed using the VTK-m filter.

To perform in situ extraction, several parameters can be specified to the Lagrangian analysis filter. These include: 

#. Vector field name
#. Step size
#. Write frequency (interval length)
#. Custom seeding resolution 

   * Divide by factor in X direction
   * Divide by factor in Y direction
   * Divide by factor in Z direction
   
These parameters can be specified by manually setting the values using filter object functions or by passing values via an ascent_actions.json file. 

Use Case Examples
^^^^^^^^^^^^^^^^^
To demonstrate the use of Lagrangian analysis, we use the Cloverleaf3D proxy application that is available as an example integration with the Ascent library.

Below is an example ascent_actions.json file that can be used to extract time-dependent vector fields in a Lagrangian representation from the Cloverleaf3D. The pipeline of operations to be performed contains the name of the filter - "lagrangian", followed by the specific paramters required to configure the filter. For the Cloverleaf3D proxy application, a vector field named "velocity" is generated. We can specify the step size used for advection (in this example we use "0.02"). If cust_res is set to 0, then the number of particles used is the same as the number of grid points, i.e., a 1:1 configuration. In our example, we set cust_res to 1, indicating we want to not use the default number of particles. 
We set x_res, y_res, z_res to 2, i.e., a particle is placed for every other grid point in each direction. Thus, for this custom seed resolution we are using 1:8 particles to grid points. 


[
  {
    "action": "add_pipelines",
    "pipelines":
    {   
      "pl1":
      {   
        "f1":
        {   
          "type": "lagrangian",
          "params":
          {   
            "field": "velocity",
            "step_size": "0.02",
            "write_frequency": "10",
            "cust_res": "1",
            "x_res": "2",
            "y_res": "2",
            "z_res": "2" 
          }   
        }   
      }   
    }   
  },  

  {
    "action": "execute"
  },  

  {
    "action": "reset"
  }
]

Performance
^^^^^^^^^^^

Developers
^^^^^^^^^^
Sudhanshu Sane

.. toctree::
   :maxdepth: 1
